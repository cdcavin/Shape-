#!/usr/bin/env Rscript
# run_daily_grade.R


# ---- Load Required Libraries ----
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("readr", quietly = TRUE)) install.packages("readr")
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("baseballr", quietly = TRUE)) install.packages("baseballr")
if (!requireNamespace("lubridate", quietly = TRUE)) install.packages("lubridate")
if (!requireNamespace("lme4", quietly = TRUE)) install.packages("lme4")
if (!requireNamespace("mgcv", quietly = TRUE)) install.packages("mgcv")
if (!requireNamespace("googledrive", quietly = TRUE)) install.packages("googledrive")

library(dplyr)
library(readr)
library(data.table)
library(baseballr)
library(lubridate)
library(lme4)
library(mgcv)
library(googledrive)

# ---- Utility Function to Download Model Files from Google Drive ----
download_drive_model <- function(file_id, output_path) {
  if (!file.exists(output_path)) {
    cat("Downloading", output_path, "from Google Drive...\n")
    drive_download(as_id(file_id), path = output_path, overwrite = TRUE)
  } else {
    cat(output_path, "already exists. Skipping download.\n")
  }
}

# ---- Download Pre-Trained Model Files if Needed ----
# Replace the file IDs with your actual Google Drive file IDs.
download_drive_model("model1_mlb_seperate.rds")
download_drive_model("model2_gam_mlb_seperate.rds")
download_drive_model("model3_mlb_stuff_sep.rds")
download_drive_model("model4_mlb_stuff_final_sep.rds")

# ---- Load Pre-Trained Models (Models 1 through 4) ----
model1 <- readRDS("model1_mlb_seperate.rds")
model2 <- readRDS("model2_gam_mlb_seperate.rds")
model3 <- readRDS("model3_mlb_stuff_sep.rds")
model4 <- readRDS("model4_mlb_stuff_final_sep.rds")

# ---- Set Today's Date ----
today_date <- Sys.Date()
cat("Processing Statcast data for:", today_date, "\n")

# ---- Load Today's Statcast Data using baseballr ----
# Pull pitcher data for today; adjust parameters as needed.
statcast_data <- scrape_statcast_savant(start_date = today_date,
                                         end_date = today_date,
                                         player_type = "pitcher")
# Convert to data.table for easier manipulation
data <- as.data.table(statcast_data)

# ---- Basic Processing & Renaming ----
data[, game_date := as.Date(game_date)]
data[, game_year := year(game_date)]
if ("post_bat_score" %in% names(data) & "bat_score" %in% names(data)) {
  data[, RunsScored := post_bat_score - bat_score]
} else {
  data[, RunsScored := NA_real_]
}

# Rename columns to match your pipeline. Adjust names if necessary.
setnames(data,
         old = c("pitcher", "player_name", "p_throws", "batter", "stand", "balls", "strikes",
                 "pitch_type", "events", "release_speed", "release_spin_rate", "spin_axis",
                 "release_pos_z", "release_extension", "release_pos_x", "pfx_z", "pfx_x",
                 "plate_z", "plate_x", "launch_speed", "launch_angle", "bb_type"),
         new = c("PitcherID", "PitcherName", "PitcherThrows", "BatterID", "BatterSide", "Balls",
                 "Strikes", "TaggedPitchType", "PitchCall", "Velocity", "SpinRate", "SpinAxis",
                 "RelHeight", "Extension", "RelSide", "PfxZ", "PfxX", "PlateLocHeight",
                 "PlateLocSide", "LaunchSpeed", "LaunchAngle", "BBType"))

# ---- Filter Fastballs Under 80 MPH ----
data <- data[!(TaggedPitchType %in% c("FF", "FA", "SI", "FC") & Velocity < 80)]

# ---- Create Additional Variables ----
data[, InducedVertBreak := PfxZ * 12]
data[, HorzBreak := PfxX * 12]
data[, VertApprAngle := ifelse(Extension == 0, NA,
                               atan((PlateLocHeight - RelHeight) / Extension) * (180 / pi))]
data[, HorzApprAngle := ifelse(Extension == 0, NA,
                               atan((PlateLocSide - RelSide) / Extension) * (180 / pi))]
data[, PlatoonAdvantage := as.factor(ifelse(PitcherThrows == BatterSide, 1, 0))]

# ---- Bucket Batted Ball Data ----
data[, hard_hit := ifelse(LaunchSpeed >= 95, "Hard-Hit", "Soft-Hit")]
data[, batted_ball_bucket := fifelse(!is.na(BBType),
  fifelse(hard_hit == "Hard-Hit" & BBType %in% c("ground_ball", "line_drive", "fly_ball"),
          "Hard-Hit GB/LD/FB",
  fifelse(hard_hit == "Soft-Hit" & BBType == "ground_ball", "Soft GB",
  fifelse(hard_hit == "Soft-Hit" & BBType == "line_drive", "Soft LD",
  fifelse(hard_hit == "Soft-Hit" & BBType == "fly_ball", "Soft FB",
  fifelse(hard_hit == "Soft-Hit" & BBType == "popup", "Soft Pop", "Other"))))),
  "Not In Play")]

# ---- Assign Run Values ----
data[, non_bip_run_value := fifelse(PitchCall == "walk", 0.31,
                             fifelse(PitchCall == "strikeout", -0.11,
                             fifelse(PitchCall == "ball", 0.027,
                             fifelse(PitchCall == "called_strike", -0.012,
                             fifelse(PitchCall == "swinging_strike", -0.017,
                             fifelse(PitchCall == "foul", -0.010,
                             fifelse(PitchCall == "strike", -0.017, NA_real_)))))))]
run_expectancy_chart <- data[!is.na(batted_ball_bucket), .(
  count = .N,
  avg_runs_scored = mean(RunsScored, na.rm = TRUE)
), by = batted_ball_bucket]
data <- merge(data, run_expectancy_chart, by = "batted_ball_bucket", all.x = TRUE)
data[, run_value := fcoalesce(avg_runs_scored, non_bip_run_value, 0)]

# ---- Model 1: Location-Based xRV Prediction ----
data[, xRV := predict(model1, newdata = data, allow.new.levels = TRUE)]

# ---- Model 2: Smoothed xRV Prediction (GAM) ----
data[, Smoothed_xRV := predict(model2, newdata = data, type = "response")]

# ---- Prepare Data for Model 3 ----
mlb_mean <- mean(data$Velocity, na.rm = TRUE)
mlb_sd <- sd(data$Velocity, na.rm = TRUE)
data[, Velocity_Standardized := (Velocity - mlb_mean) / mlb_sd]
data <- data[!(TaggedPitchType %in% c("FF", "SI", "FC") & Velocity_Standardized < -1.0)]
cols_to_factor <- c("PitchGroup", "TaggedPitchType", "PitcherID", "BatterID",
                    "PlatoonAdvantage", "PitcherThrows", "BatterSide")
for (col in cols_to_factor) {
  if (col %in% names(data)) {
    data[[col]] <- as.factor(data[[col]])
  }
}
data[, PitchGroup := fcase(
  TaggedPitchType %in% c("FF", "SI", "FC"), "Fastball",
  TaggedPitchType %in% c("CH", "FS", "FO"), "Changeup",
  TaggedPitchType %in% c("SL", "CU", "KC", "SV", "ST", "SC"), "BreakingBall",
  default = NA_character_
)]
data <- data[!is.na(PitchGroup)]

# ---- Model 3: xRV Prediction from Pitch Characteristics ----
data[, Predicted_xRV_Model3 := predict(model3, newdata = data, type = "response", allow.new.levels = TRUE)]
data[, StuffImpact := -(Predicted_xRV_Model3 - Smoothed_xRV)]
data[, StuffImpact := pmax(pmin(StuffImpact, 5), -5)]
data[, StuffPlus := 100 + as.numeric(scale(StuffImpact)) * 35]

# ---- Prepare Data for Model 4 ----
data[, poly_Velo1 := poly(Velocity_Standardized, 2, raw = TRUE)[,1]]
data[, poly_Velo2 := poly(Velocity_Standardized, 2, raw = TRUE)[,2]]
data[, poly_IVB1 := poly(InducedVertBreak, 2, raw = TRUE)[,1]]
data[, poly_IVB2 := poly(InducedVertBreak, 2, raw = TRUE)[,2]]
data[, poly_HB1 := poly(HorzBreak, 2, raw = TRUE)[,1]]
data[, poly_HB2 := poly(HorzBreak, 2, raw = TRUE)[,2]]
data[, poly_Spin1 := poly(SpinRate, 2, raw = TRUE)[,1]]
data[, poly_Spin2 := poly(SpinRate, 2, raw = TRUE)[,2]]
data[, poly_VAA1 := poly(VertApprAngle, 2, raw = TRUE)[,1]]
data[, poly_VAA2 := poly(VertApprAngle, 2, raw = TRUE)[,2]]
data[, poly_Ext1 := poly(Extension, 2, raw = TRUE)[,1]]
data[, poly_Ext2 := poly(Extension, 2, raw = TRUE)[,2]]
data[, poly_RH1 := poly(RelHeight, 2, raw = TRUE)[,1]]
data[, poly_RH2 := poly(RelHeight, 2, raw = TRUE)[,2]]
for (col in c("PitchGroup", "PitcherThrows", "BatterSide")) {
  if (col %in% names(data)) {
    data[[col]] <- factor(data[[col]])
  }
}

# ---- Model 4: Final Stuff+ Prediction ----
data[, FinalStuffPlus := predict(model4, newdata = data)]

# ---- Output the Fully Graded Data ----
output_file <- paste0("graded_pitches_", today_date, ".csv")
fwrite(data, output_file)
cat("Grading complete. Output saved to:", output_file, "\n")
